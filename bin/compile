#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

echo $build_dir;
echo $cache_dir;
echo $env_dir;

logger -p user.notice -t "slugc[$$]" "language_pack_grunt_maven node_install_start"

# Resolve node version using semver.io
node_version=$(curl --silent --get https://semver.io/node/resolve)

# Download node from Heroku's S3 mirror of nodejs.org/dist
echo "Downloading and installing node"
node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $build_dir

# Move node (and npm) into ./vendor and make them executable
mkdir -p $build_dir/vendor
mv $build_dir/node-v$node_version-linux-x64 $build_dir/vendor/node
chmod +x $build_dir/vendor/node/bin/*
PATH=$PATH:$build_dir/vendor/node/bin

# Run subsequent node/npm commands from the build path
cd $build_dir

# If node_modules directory is checked into source control then
# rebuild any native deps. Otherwise, restore from the build cache.
if test -d $build_dir/node_modules; then
  echo "Found existing node_modules directory; skipping cache"
  echo "Rebuilding any native dependencies"
  npm rebuild
elif test -d $cache_dir/node_modules; then
  echo "Restoring node_modules directory from cache"
  cp -r $cache_dir/node_modules $build_dir/

  echo "Pruning cached dependencies not specified in package.json"
  npm prune
fi

# Scope config var availability only to `npm install`
(
  if [ -d "$env_dir" ]; then
    echo "Exporting config vars to environment"
    export_env_dir $env_dir
  fi

  echo "Installing dependencies"
  # Make npm output to STDOUT instead of its default STDERR
  cd $build_dir/src/main/java/webapp/frontend
  npm install --userconfig $build_dir/.npmrc
  cd $build_dir
)

echo "Caching node_modules directory for future builds"
rm -rf $cache_dir/node_modules
mkdir -p $cache_dir
test -d $build_dir/node_modules && cp -r $build_dir/node_modules $cache_dir/

logger -p user.notice -t "slugc[$$]" "language_pack_grunt_maven node_install_end"

logger -p user.notice -t "slugc[$$]" "language_pack_grunt_maven bower_install_start"
if [ -f $1/bower.json ]; then
  echo "Found bower.json, running bower install"
  npm install bower

  $build_dir/node_modules/.bin/bower install
fi
logger -p user.notice -t "slugc[$$]" "language_pack_grunt_maven bower_install_end"

logger -p user.notice -t "slugc[$$]" "language_pack_grunt_maven grunt_task_start"

# Check and run Grunt
(
  if [ -f $build_dir/grunt.js ] || [ -f $build_dir/Gruntfile.js ] || [ -f $build_dir/Gruntfile.coffee ]; then
    # get the env vars
    if [ -d "$env_dir" ]; then
      echo "Exporting config vars to environment"
      export_env_dir $env_dir
    fi

    # make sure that grunt and grunt-cli are installed locally
    npm install grunt-cli
    npm install grunt
    echo "Found Gruntfile, running grunt heroku task"
    $build_dir/node_modules/.bin/grunt heroku
  else
    echo "No Gruntfile (grunt.js, Gruntfile.js, Gruntfile.coffee) found"
  fi
)

logger -p user.notice -t "slugc[$$]" "language_pack_grunt_maven grunt_task_end"

logger -p user.notice -t "slugc[$$]" "language_pack_grunt_maven java_compile_start"

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path

# parse args
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

LOGGER_FLAGS=""

curl --silent --location http://heroku-jvm-common.s3.amazonaws.com/jvm-buildpack-common.tar.gz | tar xz
. bin/util
. bin/java

export_env_dir $ENV_DIR

KEEP_M2_CACHE="true"

if [ ! -d $CACHE_DIR ]; then
  KEEP_M2_CACHE="false"
elif [ -f $CACHE_DIR/removeM2Cache ]; then
  KEEP_M2_CACHE="false"
fi

if [ "true" == $KEEP_M2_CACHE ]; then
  logger -p user.notice -t "slugc[$$]" "language_pack_grunt_maven retain_m2_repo"
fi

#create the cache dir if it doesn't exist
mkdir -p $CACHE_DIR

# create default system.properties 
if [ ! -f ${BUILD_DIR}/system.properties ]; then
  echo "java.runtime.version=1.6" > ${BUILD_DIR}/system.properties
fi

# install JDK 
javaVersion=$(detect_java_version ${BUILD_DIR})
echo -n "-----> Installing OpenJDK ${javaVersion}..."
install_java ${BUILD_DIR} ${javaVersion}
jdk_overlay ${BUILD_DIR}
echo " done"

# change to cache dir to install maven
cd $CACHE_DIR

# install maven with base repository
MAVEN_URL="http://s3.amazonaws.com/heroku-jvm-langpack-java/maven.tar.gz"

if [ ! -d .maven ]; then
  echo -n "-----> Installing Maven 3.0.3..."
  curl --silent --max-time 60 --location $MAVEN_URL | tar xz
  chmod +x .maven/bin/mvn
  echo " done"
fi

MAVEN_SETTINGS_URL="http://s3.amazonaws.com/heroku-jvm-langpack-java/settings.xml"

echo -n "-----> Installing settings.xml..."
if [ -f .m2/settings.xml ]; then
  rm .m2/settings.xml 
fi
curl --silent --max-time 10 --location $MAVEN_SETTINGS_URL --output .m2/settings.xml
echo " done"

# change to build dir to run maven
cd $BUILD_DIR

export MAVEN_OPTS="-Xmx1024m"

# build app
BUILDCMD="$CACHE_DIR/.maven/bin/mvn -B -Duser.home=$BUILD_DIR -Dmaven.repo.local=$CACHE_DIR/.m2/repository -s $CACHE_DIR/.m2/settings.xml -DskipTests=true clean install"
echo "-----> executing $BUILDCMD"

$BUILDCMD 2>&1 | sed -u 's/^/       /'

if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app with Maven"
  exit 1
fi

# finalize cache
if [ "false" == $KEEP_M2_CACHE ]; then
  touch $CACHE_DIR/removeM2Cache
fi

#copy .m2 and .maven if needed
if [ "true" == $KEEP_M2_CACHE ]; then
  for DIR in ".m2" ".maven" ; do
    cp -r $CACHE_DIR/$DIR $DIR
  done
fi

PROFILE_PATH="$BUILD_DIR/.profile.d/java.sh"
mkdir -p $(dirname $PROFILE_PATH)
echo 'export PATH="/app/.jdk/bin:$PATH"' >> $PROFILE_PATH
echo 'export JAVA_TOOL_OPTIONS="$JAVA_TOOL_OPTIONS -Djava.rmi.server.useCodebaseOnly=true"' >> $PROFILE_PATH

logger -p user.notice -t "slugc[$$]" "language_pack_grunt_maven java_compile_end $LOGGER_FLAGS"

logger -p user.notice -t "slugc[$$]" "language_pack_grunt_maven cleanup $LOGGER_FLAGS"

echo "Cleaning up node-gyp and npm artifacts"
rm -rf "$build_dir/.node-gyp"
rm -rf "$build_dir/.npm"
